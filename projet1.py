import tkinter as tk
from tkinter import *
from tkinter import ttk

#fenetres
root = tk.Tk()
root.title("Dimensionnement reseaux")
root.resizable(0,0)
#styles 
#Definir les styles
root_color = "#224870"
input_color = "#B7CDE1"
error_color = "#F02D3A"
output_color = "#4ea5d9"
bright_color = "#FFE74C"
root.config(bg = root_color)
#
global volTotal_UL_DL_Smartphone 
global volTotal_DL_Smartphone
global volL39

volTotal_UL_DL_DataCard = DoubleVar()
volTotal_DL_Datacard = DoubleVar()
nombreTotalAbonnes = 0
nombreTotalAbonnesD = DoubleVar()
proportionsSmartphone = 0
nombreTotalAbonneF = 0
nombreTotalAbonneD = DoubleVar()
volTotal_DL_Smartphone = DoubleVar()
volTotal_UL_DL_Smartphone= DoubleVar()
volL39 = DoubleVar()
#
#test = tk.Frame(root)
#functions
g = tk.Frame(root,background=input_color)
g.pack()
tab = ttk.Notebook(g)

tabResultat = ttk.Notebook(root)
input_frame = tk.LabelFrame(root, background= input_color,text="Parametres d'entrées - % de smartphones et de \"Data Card\"")
output_frame = tk.LabelFrame(root, background= output_color, text="Valeur calcules")
input_frame1 = tk.LabelFrame(root, background=input_color, text="Données d'entrées: configuration des profiles DL/UL")
output_frame = tk.LabelFrame(root, background= output_color, text="Valeur calcules")
input_frame2 = tk.LabelFrame(root,background=input_color,text="Données d'entrées: profile des utilisateurs Smartphone")
input_frame3 = tk.LabelFrame(root,background=input_color,text="Volume de trafic Internet & VPN généré par une \"Data Card\"  en UL/DL et DL")
inout_frame1 = tk.LabelFrame(root,background=input_color,text="Volume de trafic Internet généré par un smartphone LTE en UL/DL et DL")
inout_frame2 = tk.LabelFrame(root,background=input_color,text="Données d'entrées: profiles utilisateurs \"Data Card\"    UL/DL")
output_frame1 = tk.LabelFrame(root,background=output_color,text="Trafic total pour VPN et Internet à l'HC - DL/UL\"  en UL/DL et DL")
output_frame2 = tk.LabelFrame(root,background=output_color,text="Trafic total pour VPN et Internet à l'HC - DL")
calcul_trafic1 = tk.LabelFrame(root,background=input_color,text="Calcul du nombre total d'opérations pour chaque procèdure de signalisation")
calcul_trafic2 = tk.LabelFrame(root,background=input_color,text="Calcul du nombre total d'opérations pour chaque procèdure de signalisation")

calcul_trafic3 = tk.Frame(root,background=input_color)
calcul_trafic_final = tk.LabelFrame(root,background=input_color,text="5")
############################################
#my_canvas = Canvas(test)
#my_canvas.pack()
#my_scrollbar = ttk.Scrollbar(root,orient=VERTICAL, command=my_canvas.yview)
#my_canvas.create_window((0,0), window=test)
#my_scrollbar.pack(side=RIGHT,fill=Y)
#my_canvas.configure(yscrollcommand=my_scrollbar.set)
#my_canvas.bind('<Configure>', lambda e: my_canvas.configure(scrollregion=my_canvas.bbox("all")))

#canvas.create_window((0,0), window=test anchor="nw")
#test.bind("<Configure>", lambda event, canvas=canvas:  canvas.configure(scrollregion=canvas.bbox("all")))

#populate(frame)
#myscrollbar=Scrollbar(test,orient="vertical")
#myscrollbar.pack(side="right",fill="y")

#scrollderoot = tk.Scrollbar(orient="vertical", command=test.yview)
#scrollderoot.grid(column=5, row=0, sticky='ns', in_=test) #instead of number 5, set the column as the expected one for the scrollbar. Sticky ns will might be neccesary.
#root.configure(yscrollcommand=scrollderoot.set)
calcul_trafic3.pack()
#test.pack()

def calculNombreAbonne():
        """Calcul """
        try:
                global nombreTotalAbonnes
                global nombreTotalAbonneF
                global proportionsSmartphone
                #if(float(prctSmartphone.get()) > 0.0 and float(prctSmartphone.get()) < 1.0):
                proportionsSmartphone = float(nombreTotalAbonnes.get())*float(prctSmartphone.get())
                proportionsDatacard = float(nombreTotalAbonnes.get())*float(prctCard.get())
                (tk.Label(input_frame, text= "Le nombre de total d'abonnés fournies est de: "+ nombreTotalAbonnes.get()+ ". Le nombre de smartphone: " + str(proportionsSmartphone),bg=output_color)).grid(row=5,column=3)
                (tk.Label(input_frame, text= "Le nombre de data card: " + str(proportionsDatacard),bg=output_color)).grid(row=6,column=3)
                nombreTotalAbonneF.set(float(nombreTotalAbonnes.get()))
                nombreTotalAbonneD.set(proportionsDatacard)
                #nombreTotalAbonnesD.set()
                trafficTotal()
        except ValueError:
                
                tk.Label(root, text="Un ou plusieurs champs sont vides.", bg=error_color)

tab.bind('<<NotebookTabChanged>>',calculNombreAbonne)
def trafficTotal():
        try:
                totalS = DoubleVar()
                totalD = DoubleVar()
                total = DoubleVar()
                debitHC = DoubleVar()
                datacardVPN = DoubleVar()
                traficToVPN = DoubleVar()
                debitToVPN = DoubleVar()

                a = (volTotal_UL_DL_Smartphone.get()*nombreTotalAbonneF.get())/1000000.0
                b = (volTotal_UL_DL_DataCard.get()*nombreTotalAbonneD.get())/1000000.0
                c = a + b
                d = (c*8.0*1000.0)/3600.0
                e = nombreTotalAbonneD.get()*float(confProfileVPN.get())
                f = (e * volL39.get())/1000000.0
                g = (f*8.0*1000.0)/3600.0
                totalS.set(a)
                totalD.set(b)
                total.set(c)
                debitHC.set(d)
                datacardVPN.set(e)
                traficToVPN.set(f)
                debitToVPN.set(g)
                #Débit total VPN (data card) (Gbits/s)
                #total1 = (float(volTotal_UL_DL_Smartphone.get())*(float(nombreTotalAbonneF.get()))/1000000.0)
                (tk.Label(output_frame2,text="Désignation",bg=output_color)).grid(row=0,column=0)
                (tk.Label(output_frame2,text="Volume trafic total pour tous les smartphones (Gb)",bg=output_color)).grid(row=1,column=0)
                (tk.Label(output_frame2,text="Volume trafic total pour les cartes de données (Gb)",bg=output_color)).grid(row=2,column=0)
                (tk.Label(output_frame2,text="Volume de trafic total (Gb)",bg=output_color)).grid(row=3,column=0)
                (tk.Label(output_frame2,text="Debit Internet a l'HC - UL/DL  (Gbits/s)",bg=output_color)).grid(row=4,column=0)
                (tk.Label(output_frame2,text="Data Card (Cartes de donnés) utilisant VPN",bg=output_color)).grid(row=5,column=0)
                (tk.Label(output_frame2,text="Trafic total pour VPN (Gb)",bg=output_color)).grid(row=6,column=0)
                (tk.Label(output_frame2,text="Débit total VPN (data card) (Gbits/s)",bg=output_color)).grid(row=7,column=0)
                (tk.Label(output_frame2,text="Trafic total a l'HC pour Internet",bg=output_color)).grid(row=0,column=1)
                (tk.Label(output_frame2,textvariable=totalS,bg=output_color)).grid(row=1,column=1)
                (tk.Label(output_frame2,textvariable=totalD,bg=output_color)).grid(row=2,column=1)
                (tk.Label(output_frame2,textvariable=total,bg=output_color)).grid(row=3,column=1)
                (tk.Label(output_frame2,textvariable=debitHC,bg=output_color)).grid(row=4,column=1)
                (tk.Label(output_frame2,textvariable=datacardVPN,bg=output_color)).grid(row=5,column=1)
                (tk.Label(output_frame2,textvariable=traficToVPN,bg=output_color)).grid(row=6,column=1)
                (tk.Label(output_frame2,textvariable=debitToVPN,bg=output_color)).grid(row=7,column=1)
                tab.add(output_frame2)
        except ValueError:
                tk.Label()

def calculVolumeTotalSmartphone():
        """Volume de trafic Internet généré par un  smartphone LTE en UL/DL et DL"""
        #calcul_volume_button.configure(state=ACTIVE)
        try:
                global volTotal_UL_DL_Smartphone 
                global volTotal_DL_Smartphone
                
                volTotalTraficHCSmartphoneULDLNav = float (navWebSm1.get()) * float(navWebSm2.get())
                volTotalTraficHCSmartphoneULNav = volTotalTraficHCSmartphoneULDLNav* float(navWebSm3.get())
                volTotalTraficHCSmartphoneULDLMail = float(emailSm1.get()) * float(emailSm2.get())
                volTotalTraficHCSmartphoneULMail = volTotalTraficHCSmartphoneULDLMail * float(emailSm3.get())
                volTotalTraficHCSmartphoneULDLStr = float(strVideoSm1.get()) * float(strVideoSm2.get())
                volTotalTraficHCSmartphoneULStr = volTotalTraficHCSmartphoneULDLStr * float(strVideoSm3.get())
                volTotalTraficHCSmartphoneULDLVpn = float(vpnSm1.get())* float(vpnSm2.get())
                volTotalTraficHCSmartphoneULVpn = volTotalTraficHCSmartphoneULDLVpn * float(vpnSm3.get())
                volTotalTraficHCSmartphoneULDLGame = float(gamingSm1.get()) * float(gamingSm2.get()) 
                volTotalTraficHCSmartphoneULGame = volTotalTraficHCSmartphoneULDLGame*float(gamingSm3.get())
                #volTotal_UL_DL
                #volTotal_DL
                volTotal_UL_DL = volTotalTraficHCSmartphoneULDLNav + volTotalTraficHCSmartphoneULDLMail+volTotalTraficHCSmartphoneULDLStr+volTotalTraficHCSmartphoneULDLGame
                volTotal_DL = volTotalTraficHCSmartphoneULNav+volTotalTraficHCSmartphoneULMail+volTotalTraficHCSmartphoneULStr+volTotalTraficHCSmartphoneULGame

                volTotal_UL_DL_Smartphone.set(volTotal_UL_DL)
                volTotal_DL_Smartphone.set(volTotal_DL)
                
                trafficTotal()
                (tk.Label(inout_frame1, text = volTotalTraficHCSmartphoneULDLNav, bg=output_color,width=26)).grid(row=1,column=4)
                (tk.Label(inout_frame1, text = volTotalTraficHCSmartphoneULNav, bg=output_color,width=26)).grid(row=1,column=5)
                (tk.Label(inout_frame1, text= volTotalTraficHCSmartphoneULDLMail, bg=output_color,width=26)).grid(row=2,column=4)
                (tk.Label(inout_frame1, text= volTotalTraficHCSmartphoneULMail, bg=output_color,width=26)).grid(row=2,column=5)
                (tk.Label(inout_frame1, text= volTotalTraficHCSmartphoneULDLStr, bg=output_color,width=26)).grid(row=3,column=4)
                (tk.Label(inout_frame1, text= volTotalTraficHCSmartphoneULStr, bg=output_color,width=26)).grid(row=3,column=5)
                (tk.Label(inout_frame1, text= volTotalTraficHCSmartphoneULDLVpn, bg=output_color,width=26)).grid(row=4,column=4)
                (tk.Label(inout_frame1, text= volTotalTraficHCSmartphoneULVpn, bg=output_color,width=26)).grid(row=4,column=5)
                (tk.Label(inout_frame1, text= volTotalTraficHCSmartphoneULDLGame, bg=output_color,width=26)).grid(row=5,column=4)
                (tk.Label(inout_frame1, text= volTotalTraficHCSmartphoneULGame, bg=output_color,width=26)).grid(row=5,column=5)
                (tk.Label(inout_frame1, text= volTotal_UL_DL, bg=output_color,width=26)).grid(row=6,column=4)
                (tk.Label(inout_frame1, text= volTotal_DL, bg=output_color,width=26)).grid(row=6,column=5)

        except ValueError:
                (tk.Label(inout_frame1, text="Veuillez remplir les champs correctement",bg=error_color)).grid(row=7,column=4)

def calculVolumeTotalDatacard():
        """"""
        """Volume de trafic Internet généré par un  Datacard LTE en UL/DL et DL""" 
        #clearAll()
        global volTotal_UL_DL_DataCard
        global volTotal_DL_Datacard
        global volL39

        volTotal_UL_DL_DataCard = DoubleVar()
        volTotal_DL_Datacard = DoubleVar()
        volL39 = DoubleVar()
        volTotalTraficHCDatacardULDLNav = float (navWebDc1.get()) * float(navWebDc2.get())
        volTotalTraficHCDatacardULNav = volTotalTraficHCDatacardULDLNav* float(navWebDc3.get())
        volTotalTraficHCDatacardULDLMail = float(emailDc1.get()) * float(emailDc2.get())
        volTotalTraficHCDatacardULMail = volTotalTraficHCDatacardULDLMail * float(emailDc3.get())
        volTotalTraficHCDatacardULDLStr = float(strVideoDc1.get()) * float(strVideoDc2.get())
        volTotalTraficHCDatacardULStr = volTotalTraficHCDatacardULDLStr * float(strVideoDc3.get())
        volTotalTraficHCDatacardULDLVpn = float(vpnDc1.get())* float(vpnDc2.get())
        volTotalTraficHCDatacardULVpn = volTotalTraficHCDatacardULDLVpn * float(vpnDc3.get())
        volTotalTraficHCDatacardULDLGame = float(gamingDc1.get()) * float(gamingDc2.get()) 
        volTotalTraficHCDatacardULGame = volTotalTraficHCDatacardULDLGame*float(gamingDc3.get())
        volTotal_UL_DL = volTotalTraficHCDatacardULDLNav + volTotalTraficHCDatacardULDLMail+volTotalTraficHCDatacardULDLStr+volTotalTraficHCDatacardULDLGame
        volTotal_UL = volTotalTraficHCDatacardULNav+volTotalTraficHCDatacardULMail+volTotalTraficHCDatacardULStr+volTotalTraficHCDatacardULGame
        voltraticVPN = float(vpnDc1.get())*float(vpnDc2.get())

        volTotal_UL_DL_DataCard.set(volTotal_UL_DL)
        volTotal_DL_Datacard.set(volTotal_UL)
        volL39.set(voltraticVPN)
        (tk.Label(input_frame3, text = volTotalTraficHCDatacardULDLNav,width=30, bg=output_color)).grid(row=1,column=4)
        (tk.Label(input_frame3, text = volTotalTraficHCDatacardULNav,width=30, bg=output_color)).grid(row=1,column=5)
        (tk.Label(input_frame3, text= volTotalTraficHCDatacardULDLMail,width=30, bg=output_color)).grid(row=2,column=4)
        (tk.Label(input_frame3, text= volTotalTraficHCDatacardULMail,width=30, bg=output_color)).grid(row=2,column=5)
        (tk.Label(input_frame3, text= volTotalTraficHCDatacardULDLStr,width=30, bg=output_color)).grid(row=3,column=4)
        (tk.Label(input_frame3, text= volTotalTraficHCDatacardULStr,width=30, bg=output_color)).grid(row=3,column=5)
        (tk.Label(input_frame3, text= volTotalTraficHCDatacardULDLVpn,width=30, bg=output_color)).grid(row=4,column=4)
        (tk.Label(input_frame3, text= volTotalTraficHCDatacardULVpn,width=30, bg=output_color)).grid(row=4,column=5)
        (tk.Label(input_frame3, text= volTotalTraficHCDatacardULDLGame,width=30, bg=output_color)).grid(row=5,column=4)
        (tk.Label(input_frame3, text= volTotalTraficHCDatacardULGame,width=30, bg=output_color)).grid(row=5,column=5)
        (tk.Label(input_frame3, text= volTotal_UL_DL,width=30, bg=output_color)).grid(row=6,column=4)
        (tk.Label(input_frame3, text= volTotal_UL,width=30, bg=output_color)).grid(row=6,column=5)
        (tk.Label(input_frame3,text= voltraticVPN, bg=output_color)).grid(row=7,column=4)
        (tk.Label(input_frame3,text= vpnDc3.get(), bg=output_color)).grid(row=7,column=5)

def calculCapacite():
        global t,t1,t2,t3,t4,t4,t5,t6,t7,t8,t9,t10,t11
        t = DoubleVar()
        t1 = DoubleVar()
        t2 = DoubleVar()
        t3 = DoubleVar()
        t4 = DoubleVar()
        t5 = DoubleVar()
        t6 = DoubleVar()
        t7 = DoubleVar()
        t8 = DoubleVar()
        t9 = DoubleVar()
        t10 = DoubleVar()
        t11 = DoubleVar()
        t.set(float(varD66.get())*float(varED66.get()))
        t1.set(float(varD67.get())*float(varED67.get()))
        t2.set(float(varD68.get())*float(varED68.get()))
        t3.set(float(varD69.get())*float(varED69.get()))
        t4.set(float(varD70.get())*float(varED70.get()))
        t5.set(float(varD71.get())*float(varED71.get()))
        t6.set(float(varD72.get())*float(varED72.get()))
        t7.set(float(varD73.get())*float(varED73.get()))
        t8.set(float(varD74.get())*float(varED74.get()))
        t9.set(float(varD75.get())*float(varED75.get()))
        t10.set(float(varD76.get())*float(varED76.get()))
        #t11.set(float(varD76.get())*float(varED76.get()))
        tk.Entry(calcul_trafic2, textvariable=t,bg=output_color,state=DISABLED).grid(row=1,column=5)
        tk.Entry(calcul_trafic2, textvariable=t1,bg=output_color,state=DISABLED).grid(row=2,column=5)
        tk.Entry(calcul_trafic2, textvariable=t2,bg=output_color,state=DISABLED).grid(row=3,column=5)
        tk.Entry(calcul_trafic2, textvariable=t3,bg=output_color,state=DISABLED).grid(row=4,column=5)
        tk.Entry(calcul_trafic2, textvariable=t4,bg=output_color,state=DISABLED).grid(row=5,column=5)
        tk.Entry(calcul_trafic2, textvariable=t5,bg=output_color,state=DISABLED).grid(row=6,column=5)
        tk.Entry(calcul_trafic2, textvariable=t6,bg=output_color,state=DISABLED).grid(row=7,column=5)
        tk.Entry(calcul_trafic2, textvariable=t7,bg=output_color,state=DISABLED).grid(row=8,column=5)
        tk.Entry(calcul_trafic2, textvariable=t8,bg=output_color,state=DISABLED).grid(row=9,column=5)
        tk.Entry(calcul_trafic2, textvariable=t9,bg=output_color,state=DISABLED).grid(row=10,column=5)
        tk.Entry(calcul_trafic2, textvariable=t10,bg=output_color,state=DISABLED).grid(row=11,column=5)

def calcul_procedures():
        
#frame 1

prctCard = StringVar()
prctSmartphone = StringVar()
nombreTotalAbonnes = StringVar(value="0")
nombreTotalAbonneF = DoubleVar()
confProfileVPN = StringVar()

tk.Label(input_frame, text="Pourcentage Data Card:", bg=input_color).grid(row=0,column=0)
tk.Label(input_frame, text="Pourcentage de smartphone:", bg=input_color).grid(row=1,column=0)
tk.Label(input_frame, text="Nombre total d'abonnes: ", bg = input_color).grid(row=2,column=0)
tk.Entry(input_frame, textvariable = prctCard, width=20, bg=input_color).grid(row=0,column=1)
tk.Entry(input_frame, textvariable = prctSmartphone, width=20, bg=input_color).grid(row=1,column=1)
tk.Entry(input_frame, textvariable = nombreTotalAbonnes, width=20, bg=input_color).grid(row=2,column=1)

submit_button = tk.Button(input_frame, width = 40, text = "Calcul du nombre d'abonnes",command= calculNombreAbonne, bg=output_color)
submit_button.grid(row=3,column=1)
input_frame.pack(pady=1)
#frame2 Données d'entrées: configuration des profiles DL/UL


tk.Label(input_frame1,text="Services",bg=input_color).grid(row=0,column=0)
tk.Label(input_frame1,text="Abonnés actifs",bg=input_color).grid(row=0,column=1)
tk.Label(input_frame1,text="Accès Internet",bg=input_color).grid(row=1,column=0)
tk.Label(input_frame1,text="ALL",bg=input_color).grid(row=1,column=1)
tk.Label(input_frame1,text="VPN (via Data Card)",bg=input_color).grid(row=2,column=0)
tk.Entry(input_frame1,textvariable= confProfileVPN, width=20, bg=input_color).grid(row=2,column=1)

input_frame1.pack()
#frame2 Données d'entrées: profile des utilisateurs Smartphone
#Les labels des variables d'entrees
tk.Label(input_frame2,text="Types de services",bg=input_color).grid(row=0,column=0)
tk.Label(input_frame2,text="Nombre de sessions à l'HC",bg=input_color).grid(row=0,column=1)
tk.Label(input_frame2,text="Taille session à l'HC (Mb)",bg=input_color).grid(row=0,column=2)
tk.Label(input_frame2,text="Pourcentage DL",bg=input_color).grid(row=0,column=3)
tk.Label(input_frame2,text="Navigation Web",bg=input_color).grid(row=1,column=0)
tk.Label(input_frame2,text="Email",bg=input_color).grid(row=2,column=0)
tk.Label(input_frame2,text="Streaming video",bg=input_color).grid(row=3,column=0)
tk.Label(input_frame2,text="VPN",bg=input_color).grid(row=4,column=0)
tk.Label(input_frame2,text="Gaming",bg=input_color).grid(row=5,column=0)
######################################################################################
# Les variables pour les donnees d'entrées automatique calqué sur le menu de calcul
######################################################################################
navWebSm1 = StringVar()
navWebSm2 = StringVar()
navWebSm3 = StringVar()

emailSm1 = StringVar()
emailSm2 = StringVar()
emailSm3 = StringVar()

strVideoSm1 = StringVar()
strVideoSm2 = StringVar()
strVideoSm3 = StringVar()
vpnSm1 = StringVar()
vpnSm2 = StringVar()
vpnSm3 = StringVar()
gamingSm1 = StringVar()
gamingSm2 = StringVar()
gamingSm3 = StringVar()

navWebDc1 = StringVar()
navWebDc2 = StringVar()
navWebDc3 = StringVar()

emailDc1 = StringVar()
emailDc2 = StringVar()
emailDc3 = StringVar()

vpnDc1 = StringVar()
vpnDc2 = StringVar()
vpnDc3 = StringVar()

gamingDc1 = StringVar()
gamingDc2 = StringVar()
gamingDc3 = StringVar()
#
strVideoDc1 = StringVar()
strVideoDc2 = StringVar()
strVideoDc3 = StringVar()
#

tk.Entry(input_frame2, width=20,textvariable=navWebSm1, bg=input_color).grid(row=1,column=1) 
tk.Entry(input_frame2, width=20, textvariable=emailSm1, bg=input_color).grid(row=2,column=1)
tk.Entry(input_frame2, width=20, textvariable=strVideoSm1, bg=input_color).grid(row=3,column=1)
tk.Entry(input_frame2, width=20, textvariable=vpnSm1, bg=input_color).grid(row=4,column=1)
tk.Entry(input_frame2, width=20, textvariable=gamingSm1, bg=input_color).grid(row=5,column=1)
#nombre de sessions a l'HC Smartphone
tk.Entry(input_frame2, textvariable=navWebSm2,width=20, bg=input_color).grid(row=1,column=2) 
tk.Entry(input_frame2, textvariable=emailSm2, width=20, bg=input_color).grid(row=2,column=2) 
tk.Entry(input_frame2, textvariable=strVideoSm2, width=20, bg=input_color).grid(row=3,column=2) 
tk.Entry(input_frame2, textvariable = vpnSm2, width=20, bg=input_color).grid(row=4,column=2) 
tk.Entry(input_frame2, textvariable = gamingSm2, width=20, bg=input_color).grid(row=5,column=2) 
#
tk.Entry(input_frame2,textvariable= navWebSm3, width=20, bg=input_color).grid(row=1,column=3) 
tk.Entry(input_frame2,textvariable = emailSm3,width=20, bg=input_color).grid(row=2,column=3) 
tk.Entry(input_frame2,textvariable =strVideoSm3, width=20, bg=input_color).grid(row=3,column=3) 
tk.Entry(input_frame2,textvariable = vpnSm3, width=20, bg=input_color).grid(row=4,column=3) 
tk.Entry(input_frame2, textvariable=gamingSm3, width=20, bg=input_color).grid(row=5,column=3) 

################## fin Variables Smartphone ###########################################################

##############

# DataCard entree frame 3
(tk.Label(input_frame3,text="Types de services",bg=input_color)).grid(row=0,column=0)
(tk.Label(input_frame3,text="Nombre de sessions à l'HC",bg=input_color)).grid(row=0,column=1)
(tk.Label(input_frame3,text="Taille session à l'HC (Mb)",bg=input_color)).grid(row=0,column=2)
(tk.Label(input_frame3,text="Pourcentage DL",bg=input_color)).grid(row=0,column=3)
(tk.Label(input_frame3,text="Navigation Web",bg=input_color)).grid(row=1,column=0)
(tk.Label(input_frame3,text="Email",bg=input_color)).grid(row=2,column=0)
(tk.Label(input_frame3,text="Streaming video",bg=input_color)).grid(row=3,column=0)
(tk.Label(input_frame3,text="VPN",bg=input_color)).grid(row=4,column=0)
(tk.Label(input_frame3,text="Gaming",bg=input_color)).grid(row=5,column=0)
(tk.Label(input_frame3,text="Volume trafic à l'HC en UL/DL (Mb)",width=30,bg=output_color)).grid(row=0,column=4)
(tk.Label(input_frame3, text="Volume trafic à l'HC en DL (Mb)",width=30, bg=output_color)).grid(row=0,column=5)
(tk.Label(input_frame3,text="Volume trafic à l'HC en UL/DL (Mb)",width=60,bg=output_color)).grid(row=6,column=1,columnspan=4,sticky=W)


tk.Entry(input_frame3,width=20, textvariable=navWebDc1,bg=input_color).grid(row=1,column=1) 
tk.Entry(input_frame3, width=20, textvariable=emailDc1,bg=input_color ).grid(row=2,column=1) 
tk.Entry(input_frame3, width=20, textvariable=strVideoDc1,bg=input_color).grid(row=3,column=1) 
tk.Entry(input_frame3, width=20, textvariable=vpnDc1,bg=input_color).grid(row=4,column=1) 
tk.Entry(input_frame3, width=20, textvariable=gamingDc1,bg=input_color).grid(row=5,column=1) 
#
tk.Entry(input_frame3, width=20, textvariable=navWebDc2,bg=input_color).grid(row=1,column=2)
tk.Entry(input_frame3, width=20,textvariable=emailDc2 , bg=input_color).grid(row=2,column=2)
tk.Entry(input_frame3, width=20, textvariable=strVideoDc2,bg=input_color).grid(row=3,column=2)
tk.Entry(input_frame3, width=20,textvariable=vpnDc2, bg=input_color).grid(row=4,column=2)
tk.Entry(input_frame3, width=20,textvariable=gamingDc2, bg=input_color).grid(row=5,column=2)
#
tk.Entry(input_frame3, width=20, textvariable= navWebDc3,bg=input_color).grid(row=1,column=3)
tk.Entry(input_frame3, width=20, textvariable= emailDc3, bg=input_color).grid(row=2,column=3)
tk.Entry(input_frame3, width=20, textvariable = strVideoDc3, bg=input_color).grid(row=3,column=3)
tk.Entry(input_frame3, width=20, textvariable=vpnDc3, bg=input_color).grid(row=4,column=3)
tk.Entry(input_frame3, width=20, textvariable=gamingDc3,bg=input_color).grid(row=5,column=3)


calcul_volume_button_datacard = tk.Button(input_frame3, width = 30, text = "Calcul du volume total",command=calculVolumeTotalDatacard, bg=output_color)
#

calcul_volume_button_datacard.grid(row=8,column=4)
input_frame3.pack()
############# Calcul Smartphone

tk.Label(inout_frame1,text="Types de services",bg=input_color).grid(row=0,column=0)
tk.Label(inout_frame1,text="Nombre de sessions à l'HC",bg=input_color).grid(row=0,column=1)
tk.Label(inout_frame1,text="Taille session à l'HC (Mb)",bg=input_color).grid(row=0,column=2)
tk.Label(inout_frame1,text="Pourcentage DL",bg=input_color).grid(row=0,column=3)
tk.Label(inout_frame1,text="Navigation Web",bg=input_color).grid(row=1,column=0)
tk.Label(inout_frame1,text="Email",bg=input_color).grid(row=2,column=0)
tk.Label(inout_frame1,text="Streaming video",bg=input_color).grid(row=3,column=0)
tk.Label(inout_frame1,text="VPN",bg=input_color).grid(row=4,column=0)
tk.Label(inout_frame1,text="Gaming",bg=input_color).grid(row=5,column=0)
tk.Label(inout_frame1,text="Volume trafic à l'HC en UL/DL (Mb)",bg=output_color).grid(row=0,column=4)
tk.Label(inout_frame1, text="Volume trafic à l'HC en DL (Mb)", bg=output_color).grid(row=0,column=5)
tk.Label(inout_frame1, text='Volume total du trafic Internet',bg=output_color).grid(row=6,column=1,columnspan=4)
calcul_volume_button = tk.Button(inout_frame1, width = 30, text = "Calcul du volume total",command=calculVolumeTotalSmartphone, bg=output_color)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=navWebSm2,state=DISABLED).grid(row=1,column=2)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=emailSm2,state=DISABLED).grid(row=2,column=2)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=strVideoSm2,state=DISABLED).grid(row=3,column=2)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=vpnSm2,state=DISABLED).grid(row=4,column=2)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=gamingSm2,state=DISABLED).grid(row=5,column=2)
#   modification
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=navWebSm1,state=DISABLED).grid(row=1,column=1)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=emailSm1,state=DISABLED).grid(row=2,column=1)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=strVideoSm1,state=DISABLED).grid(row=3,column=1)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=vpnSm1,state=DISABLED).grid(row=4,column=1)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=gamingSm1,state=DISABLED).grid(row=5,column=1)
#
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable= navWebSm3, state=DISABLED).grid(row=1,column=3)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=emailSm3,state=DISABLED).grid(row=2,column=3)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=strVideoSm3,state=DISABLED).grid(row=3,column=3)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=vpnSm3,state=DISABLED).grid(row=4,column=3)
tk.Entry(inout_frame1, width=20, bg=input_color,textvariable=gamingSm3,state=DISABLED).grid(row=5,column=3)
#
calcul_volume_button.grid(row=8,column=3)
inout_frame1.pack()
###############labels datacards#################################
(tk.Label(input_frame3, text="Volume total du trafic VPN",bg=output_color)).grid(row=7,column=3)
calcul_volume_button.grid(row=8,column=4)
input_frame2.pack()
######################################

tk.Label(inout_frame2,text="Types de services",bg=input_color).grid(row=0,column=0)
tk.Label(inout_frame2,text="Nombre de sessions à l'HC",bg=input_color).grid(row=0,column=1)
tk.Label(inout_frame2,text="Taille session à l'HC (Mb)",bg=input_color).grid(row=0,column=2)
tk.Label(inout_frame2,text="Pourcentage DL",bg=input_color).grid(row=0,column=3)
tk.Label(inout_frame2,text="Navigation Web",bg=input_color).grid(row=1,column=0)
tk.Label(inout_frame2,text="Email",bg=input_color).grid(row=2,column=0)
tk.Label(inout_frame2,text="Streaming video",bg=input_color).grid(row=3,column=0)
tk.Label(inout_frame2,text="VPN",bg=input_color).grid(row=4,column=0)
tk.Label(inout_frame2,text="Gaming",bg=input_color).grid(row=5,column=0)
tk.Entry(inout_frame2,width=20, textvariable=navWebDc1,bg=input_color).grid(row=1,column=1) 
tk.Entry(inout_frame2, width=20, textvariable=emailDc1,bg=input_color ).grid(row=2,column=1) 
tk.Entry(inout_frame2, width=20, textvariable=strVideoDc1,bg=input_color).grid(row=3,column=1) 
tk.Entry(inout_frame2, width=20, textvariable=vpnDc1,bg=input_color).grid(row=4,column=1) 
tk.Entry(inout_frame2, width=20, textvariable=gamingDc1,bg=input_color).grid(row=5,column=1) 
#
tk.Entry(inout_frame2, width=20, textvariable=navWebDc2,bg=input_color).grid(row=1,column=2)
tk.Entry(inout_frame2, width=20,textvariable=emailDc2 , bg=input_color).grid(row=2,column=2)
tk.Entry(inout_frame2, width=20, textvariable=strVideoDc2,bg=input_color).grid(row=3,column=2)
tk.Entry(inout_frame2, width=20,textvariable=vpnDc2, bg=input_color).grid(row=4,column=2)
tk.Entry(inout_frame2, width=20,textvariable=gamingDc2, bg=input_color).grid(row=5,column=2)
#
tk.Entry(inout_frame2, width=20, textvariable= navWebDc3,bg=input_color).grid(row=1,column=3)
tk.Entry(inout_frame2, width=20, textvariable= emailDc3, bg=input_color).grid(row=2,column=3)
tk.Entry(inout_frame2, width=20, textvariable = strVideoDc3, bg=input_color).grid(row=3,column=3)
tk.Entry(inout_frame2, width=20, textvariable=vpnDc3, bg=input_color).grid(row=4,column=3)
tk.Entry(inout_frame2, width=20, textvariable=gamingDc3,bg=input_color).grid(row=5,column=3)
calcul_volume_button_datacard = tk.Button(inout_frame2, width = 30, text = "Calcul du volume total",command=calculVolumeTotalDatacard, bg=output_color)
###############################################################
#root.update()
n_attach = DoubleVar(value=8.0)
n_detach = StringVar()
n_idle = StringVar()
n_PDN = StringVar()
n_TAU_inter_MME = StringVar()
n_TAU = StringVar()
n_X2_HO = StringVar()
n_S1_HO = StringVar()
n_HO_inter_MME = StringVar()
n_procedures = StringVar()
n_attach1 = StringVar()
n_detach1 = StringVar()
n_idle1 = StringVar()
n_PDN1 = StringVar()
n_TAU_inter_MME1 = StringVar()
n_TAU1 = StringVar()
n_X2_HO1 = StringVar()
n_S1_HO1 = StringVar()
n_HO_inter_MME1 = StringVar()
n_procedures1 = StringVar()
prctage_actif = DoubleVar(value=0.0)

proportions_Actif = nombreTotalAbonneF.get()*float(prctage_actif.get())

calcul_trafic_a = float(n_attach.get())*proportions_Actif
n_attach1.set(calcul_trafic_a)
tk.Entry(calcul_trafic1,text=n_attach ,bg=input_color).grid(row=2,column=1)
tk.Entry(calcul_trafic1,textvariable=n_detach ,bg=input_color).grid(row=3,column=1)
tk.Entry(calcul_trafic1,textvariable=n_idle ,bg=input_color).grid(row=4,column=1)
tk.Entry(calcul_trafic1,textvariable=n_PDN,bg=input_color).grid(row=5,column=1)
tk.Entry(calcul_trafic1,textvariable=n_TAU_inter_MME,bg=input_color).grid(row=6,column=1)
tk.Entry(calcul_trafic1,textvariable=n_TAU,bg=input_color).grid(row=7,column=1)
tk.Entry(calcul_trafic1,textvariable=n_X2_HO,bg=input_color).grid(row=8,column=1)
tk.Entry(calcul_trafic1,textvariable=n_S1_HO,bg=input_color).grid(row=9,column=1)
tk.Entry(calcul_trafic1,textvariable=n_HO_inter_MME,bg=input_color).grid(row=10,column=1)
tk.Entry(calcul_trafic1,textvariable=n_procedures,bg=input_color).grid(row=11,column=1)
########################3
pourcentage_actif = DoubleVar()
n_attach1.set(pourcentage_actif.get()*float(nombreTotalAbonnes.get()))
tk.Label(calcul_trafic1, text="Pourcentage d'utilisateurs a l'HC", bg = input_color).grid(row=3,column=4)
tk.Entry(calcul_trafic1, textvariable=pourcentage_actif,bg=input_color).grid(row=4,column=4)
tk.Entry(calcul_trafic1,textvariable=n_attach1 ,bg=input_color).grid(row=2,column=2)
tk.Entry(calcul_trafic1,textvariable=n_detach1 ,bg=input_color).grid(row=3,column=2)
tk.Entry(calcul_trafic1,textvariable=n_idle1 ,bg=input_color).grid(row=4,column=2)
tk.Entry(calcul_trafic1,textvariable=n_PDN1,bg=input_color).grid(row=5,column=2)
tk.Entry(calcul_trafic1,textvariable=n_TAU_inter_MME1,bg=input_color).grid(row=6,column=2)
tk.Entry(calcul_trafic1,textvariable=n_TAU1,bg=input_color).grid(row=7,column=2)
tk.Entry(calcul_trafic1,textvariable=n_X2_HO1,bg=input_color).grid(row=8,column=2)
tk.Entry(calcul_trafic1,textvariable=n_S1_HO1,bg=input_color).grid(row=9,column=2)
tk.Entry(calcul_trafic1,textvariable=n_HO_inter_MME1,bg=input_color).grid(row=10,column=2)
tk.Entry(calcul_trafic1,textvariable=n_procedures1,bg=input_color).grid(row=11,column=2)

tk.Label(calcul_trafic1,text="Utilisateurs actifs à l'HC",bg=input_color).grid(row=0,column=1)
utilisateur_actif = DoubleVar()

utilisateur_actif.set(nombreTotalAbonneF.get()*pourcentage_actif.get())
tk.Entry(calcul_trafic1,textvariable=utilisateur_actif,bg=input_color).grid(row=0,column=2)
tk.Label(calcul_trafic1,text="Procédure/Abonné/HC ",bg=input_color).grid(row=1,column=1)
tk.Label(calcul_trafic1,text="Nombre",bg=input_color).grid(row=1,column=2)
tk.Label(calcul_trafic1,text="N(attach)",bg=input_color).grid(row=2,column=0)
tk.Label(calcul_trafic1,text="N(detach)",bg=input_color).grid(row=3,column=0)
tk.Label(calcul_trafic1,text="N(idle to active)",bg=input_color).grid(row=4,column=0)
tk.Label(calcul_trafic1,text="N(PDN)",bg=input_color).grid(row=5,column=0)
tk.Label(calcul_trafic1,text="N(bearers activ/desactiv)",bg=input_color).grid(row=6,column=0)
tk.Label(calcul_trafic1,text="N(TAU_inter_MME)",bg=input_color).grid(row=7,column=0)
tk.Label(calcul_trafic1,text="N(TAU)",bg=input_color).grid(row=8,column=0)
tk.Label(calcul_trafic1,text="N(X2_HO)",bg=input_color).grid(row=9,column=0)
tk.Label(calcul_trafic1,text="N(S1_HO)",bg=input_color).grid(row=10,column=0)
tk.Label(calcul_trafic1,text="N(HO_inter_MME)",bg=input_color).grid(row=11,column=0)
tk.Label(calcul_trafic1,text="N(procèdures)",bg=output_color, width=30).grid(row=12,column=0,columnspan=2)
tk.Button(calcul_trafic1,text="Calcul",command=calcul_procedures).grid(row=12,column=2)
#tk.Label(calcul_trafic1,textvariable=n11,bg=input_color).grid
calcul_trafic1.pack()
###############
variable = DoubleVar(value=3.14)
##########

varD66 = StringVar()
varD67 = StringVar()
varD68 = StringVar()
varD69 = StringVar()
varD70 = StringVar()
varD71 = StringVar()
varD72 = StringVar()
varD73 = StringVar()
varD74 = StringVar()
varD75 = StringVar()
varD76 = StringVar()
varED66 = StringVar()
varED67 = StringVar()
varED68 = StringVar()
varED69 = StringVar()
varED70 = StringVar()
varED71 = StringVar()
varED72 = StringVar()
varED73 = StringVar()
varED74 = StringVar()
varED75 = StringVar()
varED76 = StringVar()
tk.Label(calcul_trafic2, text="Composants",bg=input_color).grid(row=0,column=0)
tk.Label(calcul_trafic2, text="Metrique",bg=input_color).grid(row=0,column=1)
tk.Label(calcul_trafic2, text="Unité",bg=input_color).grid(row=0,column=2)
tk.Label(calcul_trafic2, text="Valeur",bg=input_color).grid(row=0,column=3)
tk.Entry(calcul_trafic2, textvariable=varD66,bg=input_color).grid(row=1,column=3)
tk.Entry(calcul_trafic2, textvariable=varD67,bg=input_color).grid(row=2,column=3)
tk.Entry(calcul_trafic2, textvariable=varD68,bg=input_color).grid(row=3,column=3)
tk.Entry(calcul_trafic2, textvariable=varD69,bg=input_color).grid(row=4,column=3)
tk.Entry(calcul_trafic2, textvariable=varD70,bg=input_color).grid(row=5,column=3)
tk.Entry(calcul_trafic2, textvariable=varD71,bg=input_color).grid(row=6,column=3)
tk.Entry(calcul_trafic2, textvariable=varD72,bg=input_color).grid(row=7,column=3)
tk.Entry(calcul_trafic2, textvariable=varD73,bg=input_color).grid(row=8,column=3)
tk.Entry(calcul_trafic2, textvariable=varD74,bg=input_color).grid(row=9,column=3)
tk.Entry(calcul_trafic2, textvariable=varD75,bg=input_color).grid(row=10,column=3)
tk.Entry(calcul_trafic2, textvariable=varD76,bg=input_color).grid(row=11,column=3)

#
tk.Label(calcul_trafic2, text="Pourcentage",bg=input_color).grid(row=0,column=4)
tk.Entry(calcul_trafic2, textvariable=varED66,bg=input_color).grid(row=1,column=4)
tk.Entry(calcul_trafic2, textvariable=varED67,bg=input_color).grid(row=2,column=4)
tk.Entry(calcul_trafic2, textvariable=varED68,bg=input_color).grid(row=3,column=4)
tk.Entry(calcul_trafic2, textvariable=varED69,bg=input_color).grid(row=4,column=4)
tk.Entry(calcul_trafic2, textvariable=varED70,bg=input_color).grid(row=5,column=4)
tk.Entry(calcul_trafic2, textvariable=varED71,bg=input_color).grid(row=6,column=4)
tk.Entry(calcul_trafic2, textvariable=varED72,bg=input_color).grid(row=7,column=4)
tk.Entry(calcul_trafic2, textvariable=varED73,bg=input_color).grid(row=8,column=4)
tk.Entry(calcul_trafic2, textvariable=varED74,bg=input_color).grid(row=9,column=4)
tk.Entry(calcul_trafic2, textvariable=varED75,bg=input_color).grid(row=10,column=4)
tk.Entry(calcul_trafic2, textvariable=varED76,bg=input_color).grid(row=11,column=4)
tk.Label(calcul_trafic2, text="Capacité d'exploitation",bg=input_color).grid(row=0,column=5)
tk.Label(calcul_trafic2, text="MME",bg=input_color).grid(row=1,column=0,rowspan=3)
tk.Label(calcul_trafic2, text="Simultaneous Attached Users(SAU)",bg=input_color).grid(row=1,column=1)
tk.Label(calcul_trafic2, text="Transitions idle/active par seconde",bg=input_color).grid(row=2,column=1)
tk.Label(calcul_trafic2, text="Nbre total transactions par seconde",bg=input_color).grid(row=3,column=1)
tk.Label(calcul_trafic2, text="SGW",bg=input_color).grid(row=4,column=0,rowspan=2)
tk.Label(calcul_trafic2, text="Nombre de bearers ",bg=input_color).grid(row=4,column=1)
tk.Label(calcul_trafic2, text="Capacité traitement de données",bg=input_color).grid(row=5,column=1)
tk.Label(calcul_trafic2, text="PGW",bg=input_color).grid(row=7,column=0,rowspan=2)
tk.Label(calcul_trafic2, text="Nombre de bearers ",bg=input_color).grid(row=7,column=1)
tk.Label(calcul_trafic2, text="Capacité traitement de données",bg=input_color).grid(row=8,column=1)
tk.Label(calcul_trafic2, text="SGW/PGW Combiné",bg=input_color).grid(row=9,column=0,rowspan=2)
tk.Label(calcul_trafic2, text="Nombre de bearers ",bg=input_color).grid(row=10,column=1)
tk.Label(calcul_trafic2, text="Capacité traitement de données",bg=input_color).grid(row=11,column=1)
tk.Label(calcul_trafic2, text="HSS",bg=input_color).grid(row=12,column=0)
tk.Label(calcul_trafic2, text="Nombre d'abonnés supportés",bg=input_color).grid(row=12,column=1)
tk.Label(calcul_trafic2, text="PCRF",bg=input_color).grid(row=13,column=0)
tk.Label(calcul_trafic2, text="Nbre total transactions par seconde",bg=input_color).grid(row=13,column=1)

tk.Button(calcul_trafic2, text="Calcul capacite d'exploitation",command=calculCapacite).grid(row=13,column=6)
#tk.Label(calcul_trafic2, text="Nbre total transactions par seconde",bg=input_color).grid(row=13,column=1)

#tk.Label(calcul_trafic2, text="Nombre de nœuds requis",bg=input_color).grid(row=14,column=1,columnspan=2)

#tk.Label(calcul_trafic2, text="Types de nœud EPC",bg=input_color).grid(row=15,column=1)

tk.Label(calcul_trafic2, text="Types de nœud EPC",bg=bright_color).grid(row=16,column=1)
tk.Label(calcul_trafic2, text="Nombre requis",bg=bright_color).grid(row=16,column=2)
tk.Label(calcul_trafic2, text="N(MME-SAU)",bg=input_color).grid(row=17,column=1)
tk.Label(calcul_trafic2, text="N(MME-IDLE/ACTIVE)",bg=input_color).grid(row=18,column=1)
tk.Label(calcul_trafic2, text="N(MME-Trans/Second)",bg=input_color).grid(row=19,column=1)
tk.Label(calcul_trafic2, text="N(SGW-bearers)",bg=input_color).grid(row=20,column=1)
tk.Label(calcul_trafic2, text="N(SGW-BH-DL-Internet)",bg=input_color).grid(row=21,column=1)
tk.Label(calcul_trafic2, text="N(SGW-BH-DL-VPN)",bg=input_color).grid(row=22,column=1)
tk.Label(calcul_trafic2, text="N(PGW-bearers)",bg=input_color).grid(row=23,column=1)
tk.Label(calcul_trafic2, text="N(PGW-BH-DL-Internet)",bg=input_color).grid(row=24,column=1)
tk.Label(calcul_trafic2, text="N(PGW-BH-DL-VPN)",bg=input_color).grid(row=25,column=1)
tk.Label(calcul_trafic2, text="N(SGW/PGW-bearers)",bg=input_color).grid(row=26,column=1)
tk.Label(calcul_trafic2, text="N(SGW/PGW-BH-DL-Internet)",bg=input_color).grid(row=27,column=1)
tk.Label(calcul_trafic2, text="N(SGW/PGW-BH-DL-Internet)",bg=input_color).grid(row=28,column=1)
tk.Label(calcul_trafic2, text="N(SGW-BH-DL-VPN)",bg=input_color).grid(row=28,column=1)
tk.Label(calcul_trafic2,text="N(HSS)",bg=input_color).grid(row=29,column=1)
tk.Label(calcul_trafic2,text="N(HSS)",bg=input_color).grid(row=30,column=1)
#
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=17,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=18,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=19,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=20,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=21,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=22,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=23,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=24,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=25,column=2)
tk.Label(calcul_trafic2, text=variable.get(),bg=input_color).grid(row=26,column=2)
tk.Label(calcul_trafic2, text="N(SGW/PGW-BH-DL-Internet)_test",bg=input_color).grid(row=27,column=2)
tk.Label(calcul_trafic2, text="N(SGW/PGW-BH-DL-Internet)_test",bg=input_color).grid(row=28,column=2)
tk.Label(calcul_trafic2, text="N(SGW-BH-DL-VPN)_test",bg=input_color).grid(row=28,column=2)
tk.Label(calcul_trafic2,text="N(HSS)_test",bg=input_color).grid(row=29,column=2)
tk.Label(calcul_trafic2,text="N(HSS)_test",bg=input_color).grid(row=30,column=2)
#
tk.Label(calcul_trafic3,text="Dimensionnement du plan usager (données des utilisateurs Smarphones + Data Card)",justify=CENTER).pack()
tab3 = ttk.Notebook(calcul_trafic3)
miniframe1 = tk.LabelFrame(tab3,text="Pour l'interface S1U",bg=input_color)
tk.Label(miniframe1, text="Overhead par paquet (octets)",background=input_color).grid(row=0,column=0)
tk.Label(miniframe1, text="Taille paquet",background=input_color).grid(row=1,column=0)
tk.Label(miniframe1,text="Overhead",background=input_color).grid(row=2,column=0)
tk.Label(miniframe1,text="Debit pour les services Internet",background=input_color).grid(row=3,column=0)
tk.Label(miniframe1,text="Debit pour le service VPN",background=input_color).grid(row=4,column=0)
tk.Label(miniframe1,text="Débit total",background=input_color).grid(row=5,column=0)
overh1 = StringVar()
overh2 = StringVar()
overh3 = StringVar()
overh1P = StringVar()
overh2P = StringVar()
overh3P = StringVar()
taille1P = StringVar()
taille2P = StringVar()
taille3P = StringVar()
tailleMessage = StringVar(value="1024")

miniframe2 = tk.LabelFrame(tab3,text="Pour l'interface S5",bg=input_color)
tk.Label(miniframe2, text="Overhead par paquet (octets)",background=input_color).grid(row=0,column=0)
tk.Label(miniframe2, text="Taille paquet",background=input_color).grid(row=1,column=0)
tk.Label(miniframe2,text="Overhead",background=input_color).grid(row=2,column=0)
tk.Label(miniframe2,text="Debit pour les services Internet",background=input_color).grid(row=3,column=0)
tk.Label(miniframe2,text="Debit pour le service VPN",background=input_color).grid(row=4,column=0)
tk.Label(miniframe2,text="Débit total",background=input_color).grid(row=5,column=0)
tk.Label(miniframe1,text="Taille moyen d'un message (bits)").grid(row=7,column=0)
tk.Entry(miniframe1,textvariable=tailleMessage).grid(row=7,column=1)
miniframe3 = tk.LabelFrame(tab3,text="Pour l'interface SGi",bg=input_color)
tk.Label(miniframe3, text="Overhead par paquet (octets)",background=input_color).grid(row=0,column=0)
tk.Label(miniframe3, text="Taille paquet",background=input_color).grid(row=1,column=0)
tk.Label(miniframe3,text="Overhead",background=input_color).grid(row=2,column=0)
tk.Label(miniframe3,text="Debit pour les services Internet",background=input_color).grid(row=3,column=0)
tk.Label(miniframe3,text="Debit pour le service VPN",background=input_color).grid(row=4,column=0)
tk.Label(miniframe3,text="Débit total",background=input_color).grid(row=5,column=0)
tk.Label(miniframe2,text="Taille moyen d'un message (bits)").grid(row=7,column=0)
tk.Entry(miniframe2,textvariable=tailleMessage).grid(row=7,column=1)
tk.Entry(miniframe1,textvariable=overh1P,background=input_color).grid(row=1,column=1)
tk.Entry(miniframe2,textvariable=overh2P,background=input_color).grid(row=1,column=1)
tk.Entry(miniframe3,textvariable=overh3P,background=input_color).grid(row=1,column=1)

tk.Entry(miniframe1,textvariable=taille1P,background=input_color).grid(row=2 ,column=1)
tk.Entry(miniframe2,textvariable=taille2P,background=input_color).grid(row=2,column=1)
tk.Entry(miniframe3,textvariable=taille3P,background=input_color).grid(row=2,column=1)

tk.Entry(miniframe1,textvariable=overh1,background=input_color).grid(row=3,column=1)
tk.Entry(miniframe2,textvariable=overh2,background=input_color).grid(row=3,column=1)
tk.Entry(miniframe3,textvariable=overh3,background=input_color).grid(row=3,column=1)
tk.Entry(miniframe1,textvariable=overh1,background=input_color).grid(row=4,column=1)
tk.Entry(miniframe2,textvariable=overh2,background=input_color).grid(row=4,column=1)
tk.Entry(miniframe3,textvariable=overh3,background=input_color).grid(row=4,column=1)
tk.Label(miniframe3,text="Taille moyen d'un message (bits)").grid(row=7,column=0)
tk.Entry(miniframe3,textvariable=tailleMessage).grid(row=7,column=1)
tk.Entry(miniframe1,textvariable=overh1,background=input_color).grid(row=5,column=1)
tk.Entry(miniframe2,textvariable=overh2,background=input_color).grid(row=5,column=1)
tk.Entry(miniframe3,textvariable=overh3,background=input_color).grid(row=5,column=1)
miniframe1.pack()
miniframe2.pack()
miniframe3.pack()
tab3.add(miniframe1,text="Pour l'interface S1U")
tab3.add(miniframe2,text="Pour l'interface S5")
tab3.add(miniframe3,text="Pour l'interface SGi")
tab3.pack()
#####################################################################
tk.Label(calcul_trafic_final,text="Nombre",bg=input_color).grid(row=0,column=1)
tk.Label(calcul_trafic_final,text="Nombre de messages/procèdure via S1-C",bg=input_color).grid(row=0,column=2)
tk.Label(calcul_trafic_final,text="Procédures ",bg=input_color).grid(row=0,column=0)
tk.Label(calcul_trafic_final,text="N(attach)",bg=input_color).grid(row=2,column=0)
tk.Label(calcul_trafic_final,text="N(detach)",bg=input_color).grid(row=3,column=0)
tk.Label(calcul_trafic_final,text="N(idle to active)",bg=input_color).grid(row=4,column=0)
tk.Label(calcul_trafic_final,text="N(PDN)",bg=input_color).grid(row=5,column=0)
tk.Label(calcul_trafic_final,text="N(bearers activ/desactiv)",bg=input_color).grid(row=6,column=0)
tk.Label(calcul_trafic_final,text="N(TAU_inter_MME)",bg=input_color).grid(row=7,column=0)
tk.Label(calcul_trafic_final,text="N(TAU)",bg=input_color).grid(row=8,column=0)
tk.Label(calcul_trafic_final,text="N(X2_HO)",bg=input_color).grid(row=9,column=0)
tk.Label(calcul_trafic_final,text="N(S1_HO)",bg=input_color).grid(row=10,column=0)
tk.Label(calcul_trafic_final,text="N(HO_inter_MME)",bg=input_color).grid(row=11,column=0)
tk.Label(calcul_trafic_final,text="Capacité total (Gbit/s)",bg=output_color, width=30).grid(row=12,column=0,columnspan=2)
tk.Entry(calcul_trafic_final,textvariable=n_attach ,bg=input_color).grid(row=2,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_detach ,bg=input_color).grid(row=3,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_idle ,bg=input_color).grid(row=4,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_PDN,bg=input_color).grid(row=5,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_TAU_inter_MME,bg=input_color).grid(row=6,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_TAU,bg=input_color).grid(row=7,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_X2_HO,bg=input_color).grid(row=8,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_S1_HO,bg=input_color).grid(row=9,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_HO_inter_MME,bg=input_color).grid(row=10,column=1)
tk.Entry(calcul_trafic_final,textvariable=n_procedures,bg=input_color).grid(row=11,column=1)
tk.Label(calcul_trafic_final,text="Capacité S1-C (Gbits/s)",bg=input_color).grid(row=0,column=3,rowspan=2)
tk.Label(calcul_trafic_final,text="Nombre de messages via S11",bg=input_color).grid(row=0,column=4)
tk.Label(calcul_trafic_final,text="Capacité S11 (Gbits/s)",bg=input_color).grid(row=0,column=5)
tk.Label(calcul_trafic_final,text="Nombre de messages via S8",bg=input_color).grid(row=0,column=6)
tk.Label(calcul_trafic_final,text="Capacité S8 (Gbits/s)",bg=input_color).grid(row=0,column=7)
tk.Label(calcul_trafic_final,text="Nombre de messages via S6a",bg=input_color).grid(row=13,column=2)
#tk.Label(calcul_trafic_final,text="Nombre de messages via S6a",bg=input_color,width=10).grid(row=0,column=8)
tk.Label(calcul_trafic_final,text="Capacité S6a (Gbits/s)",bg=input_color).grid(row=13,column=3)
###################################################################################################################
n11 = DoubleVar()
n12 = DoubleVar()
n13 = DoubleVar()
n21 = DoubleVar()
n22 = DoubleVar()
n23 = DoubleVar()

n11.set(n_attach.get()*float(tailleMessage.get()))

tk.Entry(calcul_trafic_final,textvariable=n11 ,bg=input_color).grid(row=2,column=2)
tk.Entry(calcul_trafic_final,textvariable=n11 ,bg=input_color).grid(row=3,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_idle ,bg=input_color).grid(row=4,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_PDN,bg=input_color).grid(row=5,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_TAU_inter_MME,bg=input_color).grid(row=6,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_TAU,bg=input_color).grid(row=7,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_X2_HO,bg=input_color).grid(row=8,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_S1_HO,bg=input_color).grid(row=9,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_HO_inter_MME,bg=input_color).grid(row=10,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_procedures,bg=input_color).grid(row=11,column=2)
tk.Entry(calcul_trafic_final,textvariable=n_attach ,bg=input_color).grid(row=2,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_detach ,bg=input_color).grid(row=3,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_idle ,bg=input_color).grid(row=4,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_PDN,bg=input_color).grid(row=5,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_TAU_inter_MME,bg=input_color).grid(row=6,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_TAU,bg=input_color).grid(row=7,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_X2_HO,bg=input_color).grid(row=8,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_S1_HO,bg=input_color).grid(row=9,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_HO_inter_MME,bg=input_color).grid(row=10,column=3)
tk.Entry(calcul_trafic_final,textvariable=n_procedures,bg=input_color).grid(row=11,column=3)

tk.Entry(calcul_trafic_final,textvariable=n_attach ,bg=input_color).grid(row=2,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_detach ,bg=input_color).grid(row=3,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_idle ,bg=input_color).grid(row=4,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_PDN,bg=input_color).grid(row=5,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_TAU_inter_MME,bg=input_color).grid(row=6,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_TAU,bg=input_color).grid(row=7,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_X2_HO,bg=input_color).grid(row=8,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_S1_HO,bg=input_color).grid(row=9,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_HO_inter_MME,bg=input_color).grid(row=10,column=4)
tk.Entry(calcul_trafic_final,textvariable=n_procedures,bg=input_color).grid(row=11,column=4)

tk.Entry(calcul_trafic_final,textvariable=n_attach ,bg=input_color,width=10).grid(row=2,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_detach ,bg=input_color,width=10).grid(row=3,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_idle ,bg=input_color,width=10).grid(row=4,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_PDN,bg=input_color,width=10).grid(row=5,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_TAU_inter_MME,bg=input_color,width=10).grid(row=6,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_TAU,bg=input_color,width=10).grid(row=7,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_X2_HO,bg=input_color,width=10).grid(row=8,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_S1_HO,bg=input_color,width=10).grid(row=9,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_HO_inter_MME,bg=input_color,width=10).grid(row=10,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_procedures,bg=input_color,width=10).grid(row=11,column=5)
tk.Entry(calcul_trafic_final,textvariable=n_attach ,bg=input_color,width=10).grid(row=2,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_detach ,bg=input_color,width=10).grid(row=3,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_idle ,bg=input_color,width=10).grid(row=4,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_PDN,bg=input_color,width=10).grid(row=5,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_TAU_inter_MME,bg=input_color,width=10).grid(row=6,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_TAU,bg=input_color,width=10).grid(row=7,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_X2_HO,bg=input_color,width=10).grid(row=8,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_S1_HO,bg=input_color,width=10).grid(row=9,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_HO_inter_MME,bg=input_color,width=10).grid(row=10,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_procedures,bg=input_color,width=10).grid(row=11,column=6)
tk.Entry(calcul_trafic_final,textvariable=n_attach ,bg=input_color,width=10).grid(row=2,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_detach ,bg=input_color,width=10).grid(row=3,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_idle ,bg=input_color,width=10).grid(row=4,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_PDN,bg=input_color,width=10).grid(row=5,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_TAU_inter_MME,bg=input_color,width=10).grid(row=6,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_TAU,bg=input_color,width=10).grid(row=7,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_X2_HO,bg=input_color,width=10).grid(row=8,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_S1_HO,bg=input_color,width=10).grid(row=9,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_HO_inter_MME,bg=input_color,width=10).grid(row=10,column=7)
tk.Entry(calcul_trafic_final,textvariable=n_procedures,bg=input_color,width=10).grid(row=11,column=7)
#################################################################################
calcul_trafic2.pack()
tab.add(input_frame,state='hidden')#,text='% de smartphones et de \"Data Card\"')
tab.add(input_frame1)#, text='Configuration des profiles DL/UL')
tab.add(input_frame2)#, text= 'Profil des utilisateurs Smartphone UL/DL')
tab.add(inout_frame1)#, text='Volume de trafic Internet généré par un smartphone LTE en UL/DL et DL')
tab.add(inout_frame2)#, text = 'Donnes d\'entrees utilisateur Datacard')
tab.add(input_frame3)#, text= "Volume de trafic Internet & VPN généré par une \"Data Card\"  en UL/DL et DL")
tab.add(calcul_trafic1)
tab.add(calcul_trafic2)
tab.add(output_frame2)
tab.add(calcul_trafic3)
tab.add(calcul_trafic_final)

tab.pack(fill=BOTH, expand=False)
tab.pack()
trafficTotal()
root.state('zoomed')
root.mainloop()
#